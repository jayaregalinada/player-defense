###*
 * Level 1
###

Game.Level.one = (game)->


Game.Level.one.prototype =
    preload: ->
        console.log 'Loading Level 1'

        return
    create: ($game)->
        console.log 'Level 1::create', $game, @
        @stage.backgroundColor = '#3a5963'
        $game.physics.startSystem Game.Physics
        $game.physics.p2.enable Game.Layer.Platform

        $game.physics.p2.applyGravity = true
        # @add.sprite(0, 0, 'platformer')
        # Player.respawn = @add.group()

        Game.Map = @add.tilemap 'map'
        Game.Map.addTilesetImage 'tileset'
        Game.Layer.Ground = Game.Map.createLayer 'Ground'
        Game.Layer.Aesthetics = Game.Map.createLayer 'Aesthetics'
        Game.Layer.Powerups = Game.Map.createLayer 'Powerups'
        Game.Layer.Platform = Game.Map.createLayer 'Platform'

        Game.Layer.Ground.resizeWorld()

        Game.Map.setCollisionBetween 0, 256, true, 'Ground'
        Game.Map.setCollisionBetween 0, 256, true, 'Platform'
        # Game.Map.createFromObjects 'Spawnpoint', 5, '', 0, true, false, Player.respawn

        Player.player = @add.sprite 0, 0, 'player'
        Player.player.anchor.setTo 0.5, 0.5

        # @spawn()

        # console.log 'Game.Map', Game.Map

        # Animations for Kit Fox
        # Player.player.animations.add 'idle', [0, 1, 2, 1], 4, true
        # Player.player.animations.add 'jump', [6, 7, 18, 19, 20, 8], 10, false
        # Player.player.animations.add 'run', [3, 4, 5], 10, true
        # Player.player.animations.add 'fight', [23, 22, 21], 10, true
        # Player.player.animations.add 'fight1', [14, 13], 10, false
        # Player.player.animations.add 'fight2', [17, 16, 15, 14], 10, false
        # Player.player.animations.add 'falling', [8], 1, true

        # Animations for Alien Green
        Player.player.animations.add 'idle', [0, 1, 7, 1], 2, true
        Player.player.animations.add 'jump', [1, 2], 10, false
        Player.player.animations.add 'run', [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 22, true
        Player.player.animations.add 'fight', [0], 10, true
        Player.player.animations.add 'fight1', [0], 10, false
        Player.player.animations.add 'fight2', [0], 10, false
        Player.player.animations.add 'falling', [2], 1, true
        Player.player.animations.add 'hurt', [3], 1, true
        Player.player.animations.add 'duck', [4], 1, true

        @physics.p2.enable Player.player
        @camera.follow Player.player, Phaser.Camera.FOLLOW_LOCKON, 0.1, 0.1

        Player.player.body.collideWorldBounds = true
        Player.player.body.maxAngular = 200
        Player.player.body.angularDrag = 200

        Game.Controls = {
            right: @input.keyboard.addKey Phaser.Keyboard.A
            left: @input.keyboard.addKey Phaser.Keyboard.D
            up: @input.keyboard.addKey Phaser.Keyboard.SPACEBAR
            down: @input.keyboard.addKey Phaser.Keyboard.S
            fight: @input.activePointer.leftButton
        }

        Mobs.tongue = new Mob.Enemy.tongue 0, $game, Player.player.x + 400, Player.player.y - 100

        return
    update: ($update)->
        console.log 'Level 1::update', $update
        # @physics.arcade.collide Player.player, Game.Layer.Ground
        # @physics.arcade.collide Player.player, Game.Layer.Platform
        # Mobs.tongue.collide Game.Layer.Ground
        Mobs.tongue.init Game.Layer.Ground

        Player.player.body.setZeroVelocity()
        # Player.player.body.velocity.x = 0

        if Game.Controls.right.isDown
            if not Player.player.body.onFloor()
                Player.player.animations.play 'falling'
            else
                Player.player.animations.play 'run'
            Player.player.scale.setTo -1, 1
            Player.player.body.moveRight Player.speed
        if Game.Controls.left.isDown
            if not Player.player.body.onFloor()
                Player.player.animations.play 'falling'
            else
                Player.player.animations.play 'run'
            Player.player.scale.setTo 1, 1
            Player.player.body.moveLeft Player.speed
        if Game.Controls.down.isDown
            console.log Player.player.body
            console.log 'Player on Floor?', Player.player.body.onFloor()
        if Player.player.body.velocity.x == 0 and Player.player.body.velocity.y == 0 and not Player.fightMode
            Player.player.animations.play 'idle'
        if Game.Controls.up.isDown and Player.player.body.onFloor()
            Player.jumpStatus = true
            Player.player.body.moveUp Player.jump
            Player.player.animations.play 'jump'
            Game.Controls.up.reset()
            @time.events.add Phaser.Timer.HALF, @noMoreJump, @
        if Game.Controls.up.isDown and not Player.player.body.onFloor() and Player.jumpStatus
            console.log 'Trying to double jump?'
            Player.player.body.moveUp Player.jump/2
        if Game.Controls.fight.isDown
            Player.fightMode = true
            Player.player.animations.play 'fight2', false, true
        else
            Player.fightMode = false

        # if @checkHit Player.player, Mobs.tongue.entity
        #     Player.player.animations.play 'hurt'



        # Player.player.body.velocity.x = 0

        return
    render: ($game)->

        # $game.debug.text 'FPS: ' + $game.time.suggestedFps, 32, 32
        # $game.debug.spriteInfo Player.player, 32, 46
        $game.debug.bodyInfo Player.player, 32, 32

        return
    noMoreJump: ->
        Player.jumpStatus = false
        console.log 'No more Jump!'

        return

    spawn: ->
        Player.respawn.forEach (spawnPoint)->
            Player.player.reset spawnPoint.x, spawnPoint.y

            return
        , @

        return

    checkHit: (spriteA, spriteB)->
        bounds = [
            spriteA.getBounds()
            spriteB.getBounds()
        ]
        intersects = Phaser.Rectangle.intersects bounds[0], bounds[1]
        if intersects
            console.log 'checkHit', intersects, bounds

        intersects
